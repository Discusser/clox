# This file contains a list of rules that describe clox's syntax.
# Each rule starts with the name, an arrow, and then an expression which shows 
# what it should be replaced with.
# The semicolon at the end of a rule is there to indicate that the rule is over.
#
# There are a few special characters that allow defining rules with more ease:
# '&' : and
#   a → b & c ;
#   # is equivalent to the intersection of rules b and c (used with ranges of characters)
#   # consider
#   b → "a" | "b" | "c" ;
#   c → "a" | "c" | "e" ;
#   # in this case, we have
#   a → "a" | "c" ;
# '!' : not
#   a → !c ;
#   # is equivalent to the range any_character, without the characters in c
#   # consider
#   c → "a" | "e" ;
#   # in this case, knowing that "a" is \x61 and "e" is \x65, we have
#   a → [ \x00-\x60 ] | [ \x62-\x64 ] | [ x66-\x7f ]
# '|' : or
#   a → b | c ;
#   # is equivalent to
#   a → b ;
#   a → c ;
# '(' ')' : grouping, simply used to avoid ambiguity
# '?' : optional
#   a → b c? ;
#   # is equivalent to
#   a → b c ;
#   a → b ;
# '+' : repeatable
#   a → a b+ ;
#   # is equivalent to
#   a → a b ;
#   b → b <expr> ;
#   b → <expr> ;
# '*' : optional repeatable
#   a → b c* ;
#   # is equivalent to
#   a → b (c+)? ;
# '#' : comment, any line that starts with this character is not part of the grammar
# '[ from-to ]' : range of characters
#   a → [ \x00-\x7f ] ;
#   # is equivalent to
#   a → \x00 | \x01 | \x02 | <...> | \x7d | \x7e | \x7f ;
# '\x' : hexadecimal number
#   \x3f
#   # is equivalent to
#   63

# GRAMMAR START ---------------------------------------------------------------
program            → declaration* EOF ;

declaration        → variable_declaration | function_declaration | statement ;
variable_declaration
                   → ( "var" | "const" ) identifier ( "=" expression )? ";" ;
function_declaration
                   → "fun" identifier "(" arguments ")" block

arguments          → ( ( identifier "," )* identifier )?

statement          → print_statement | break_statement | continue_statement |
                     switch_statement | for_statement | while_statement |
                     if_statement | block | expression_statement | return_statement;
print_statement    → "print" expression ";" ;
break_statement    → "break" ";" ;
continue_statement → "continue" ";" ;
switch_statement   → "switch" "(" expression ")" "{" ( default_case | switch_case )* "}" ;
for_statement      → "for" "(" ( variable_declaration | expression_statement | ";" ) 
                               ( ( expression ";" ) | ";" )
                               ( expression )? ")" statement ;
while_statement    → "while" "(" expression ")" statement ;
if_statement       → "if" "(" expression ")" statement ( "else" statement )? ;
block              → "{" declaration? "}" ;
expression_statement
                   → expression ";" ;
return_statement   → "return" expression ";" ;

default_case       → "default" ":" statement*
switch_case        → "switch" expression ":" statement* ;

primary            → grouping | unary | variable | string | number | literal ;
call               → primary | ( "(" arguments ")" )*;
unary              → ( "!" | "-" )* call ;
factor             → unary ( ( "/" | "*" | "%" ) unary )* ;
term               → factor ( ( "-" | "+" ) factor )* ;
comparison         → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
equality           → comparison ( ( "!=" | "==" ) comparison )* ;
and                → equality ( "and" equality )* ;
or                 → and ( " or " and )* ;
assignment         → or ;
expression         → assignment ;

grouping           → "(" expression ")"
variable           → identifier ( "=" expression )?
string             → '"' ( any_character & !( EOF | '"' ) )* '"'
number             → digit* ( "." digit+ )?
literal            → "false" | "true" | "nil"
identifier         → identifier_char ( identifier_char | digit )*

# Matches any character having an index between 0 and 127 (so that it can fit in a C char)
any_character      → [ \x00-\x7f ]
identifier_char    → [ a-z ] | [ A-Z ] | "_"
digit              → [ "0"-"9" ]
# GRAMMAR END -----------------------------------------------------------------


# A statement does not change the level of the stack, although it may push and 
# pop to the stack internally, all those operations should cancel out.

# An expression pushes a value onto the stack.

# Local variables are popped of at the end of the scope.
